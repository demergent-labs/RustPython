[package]
name = "rustpython-vm"
description = "RustPython virtual machine."
include = ["src/**/*.rs", "Cargo.toml", "build.rs", "Lib/**/*.py"]
version.workspace = true
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
repository.workspace = true
license.workspace = true

[features]
default = ["compiler", "wasmbind"]
importlib = []
encodings = ["importlib"]
vm-tracing-logging = []
flame-it = ["flame", "flamer"]
freeze-stdlib = ["encodings"]
jit = ["rustpython-jit"]
threading = ["rustpython-common/threading"]
compiler = ["parser", "codegen", "rustpython-compiler"]
ast = ["rustpython-ast"]
codegen = ["rustpython-codegen", "ast"]
parser = ["rustpython-parser", "ast"]
serde = ["dep:serde"]
wasmbind = ["getrandom/js", "wasm-bindgen"]

[dependencies]
rustpython-compiler = { workspace = true, optional = true, default-features = false, features = [
] }
rustpython-codegen = { workspace = true, optional = true, default-features = false, features = [
] }
rustpython-common = { workspace = true, default-features = false, features = [
] }
rustpython-derive = { workspace = true, default-features = false, features = [
] }
rustpython-jit = { workspace = true, optional = true, default-features = false, features = [
] }

rustpython-ast = { workspace = true, optional = true, default-features = false, features = [
] }
rustpython-parser = { workspace = true, optional = true, default-features = false, features = [
] }
rustpython-compiler-core = { workspace = true, default-features = false, features = [
] }
rustpython-parser-core = { workspace = true, default-features = false, features = [
] }
# rustpython-literal = { workspace = true, default-features = false, features = [
# ] }
# rustpython-format = { workspace = true, default-features = false, features = [
# ] }
# rustpython-sre_engine = { workspace = true, default-features = false, features = [
# ] }

# ascii = { workspace = true, default-features = false, features = [] }
ahash = { workspace = true, default-features = false, features = [] }
bitflags = { workspace = true, default-features = false, features = [] }
bstr = { workspace = true, default-features = false, features = [] }
cfg-if = { workspace = true, default-features = false, features = [] }
crossbeam-utils = { workspace = true, default-features = false, features = [] }
# chrono = { workspace = true, default-features = false, features = [] }
flame = { workspace = true, optional = true, default-features = false, features = [
] }
getrandom = { workspace = true, default-features = false, features = [] }
hex = { workspace = true, default-features = false, features = [] }
indexmap = { workspace = true, default-features = false, features = [] }
itertools = { workspace = true, default-features = false, features = [] }
is-macro = { workspace = true, default-features = false, features = [] }
libc = { workspace = true, default-features = false, features = [] }
log = { workspace = true, default-features = false, features = [] }
nix = { workspace = true, default-features = false, features = [] }
malachite-bigint = { workspace = true, default-features = false, features = [] }
num-complex = { workspace = true, default-features = false, features = [] }
num-integer = { workspace = true, default-features = false, features = [] }
num-traits = { workspace = true, default-features = false, features = [] }
num_enum = { workspace = true, default-features = false, features = [] }
once_cell = { workspace = true, default-features = false, features = [] }
parking_lot = { workspace = true, default-features = false, features = [] }
paste = { workspace = true, default-features = false, features = [] }
rand = { workspace = true, default-features = false, features = [] }
serde = { workspace = true, optional = true, default-features = false, features = [
] }
static_assertions = { workspace = true, default-features = false, features = [
] }
strum = { workspace = true, default-features = false, features = [] }
strum_macros = { workspace = true, default-features = false, features = [] }
thiserror = { workspace = true, default-features = false, features = [] }
thread_local = { workspace = true, default-features = false, features = [] }
memchr = { workspace = true, default-features = false, features = [] }

caseless = { version = "0.2.2", default-features = false, features = [] }
flamer = { version = "0.4", optional = true, default-features = false, features = [
] }
half = { version = "2", default-features = false, features = [] }
memoffset = { version = "0.9.1", default-features = false, features = [] }
optional = { version = "0.5.0", default-features = false, features = [] }
result-like = { version = "0.5.0", default-features = false, features = [] }
timsort = { version = "0.1.2", default-features = false, features = [] }

## unicode stuff
unicode_names2 = { workspace = true, default-features = false, features = [] }
unicode-casing = { version = "0.1.0", default-features = false, features = [] }
unic-ucd-bidi = { version = "0.9.0", default-features = false, features = [] }
unic-ucd-category = { version = "0.9.0", default-features = false, features = [
] }
unic-ucd-ident = { version = "0.9.0", default-features = false, features = [
  "xid",
] }

[target.'cfg(unix)'.dependencies]
rustix = { workspace = true, default-features = false, features = [] }
exitcode = { version = "1.1.2", default-features = false, features = [] }
uname = { version = "0.1.1", default-features = false, features = [] }

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
rustyline = { workspace = true, default-features = false, features = [] }
which = { version = "6", default-features = false, features = [] }

[target.'cfg(any(not(target_arch = "wasm32"), target_os = "wasi"))'.dependencies]
num_cpus = { version = "1.13.1", default-features = false, features = [] }

[target.'cfg(windows)'.dependencies]
junction = { workspace = true, default-features = false, features = [] }
schannel = { workspace = true, default-features = false, features = [] }
widestring = { workspace = true, default-features = false, features = [] }
winreg = { version = "0.52", default-features = false, features = [] }

[target.'cfg(windows)'.dependencies.windows]
version = "0.52.0"
default-features = false
features = [
  "Win32_Foundation",
  "Win32_System_LibraryLoader",
  "Win32_System_Threading",
  "Win32_UI_Shell",
]

[target.'cfg(windows)'.dependencies.windows-sys]
workspace = true
default-features = false
features = [
  "Win32_Foundation",
  "Win32_Networking_WinSock",
  "Win32_Security",
  "Win32_Storage_FileSystem",
  "Win32_System_Console",
  "Win32_System_Diagnostics_Debug",
  "Win32_System_Environment",
  "Win32_System_Ioctl",
  "Win32_System_LibraryLoader",
  "Win32_System_Memory",
  "Win32_System_Performance",
  "Win32_System_Pipes",
  "Win32_System_Registry",
  "Win32_System_SystemInformation",
  "Win32_System_SystemServices",
  "Win32_System_Threading",
  "Win32_UI_Shell",
  "Win32_UI_WindowsAndMessaging",
]

[target.'cfg(all(target_arch = "wasm32", target_os = "unknown"))'.dependencies]
wasm-bindgen = { workspace = true, optional = true, default-features = false, features = [
] }
getrandom = { workspace = true, default-features = false, features = [
  "custom",
] }

[build-dependencies]
glob = { workspace = true, default-features = false, features = [] }
itertools = { workspace = true, default-features = false, features = [] }
rustc_version = { version = "0.4.0", default-features = false, features = [] }

[lints]
workspace = true
